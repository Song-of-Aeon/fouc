<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>type = network_socket_tcp;
ip = "192.168.86.39";
port = 1337;
socket = network_create_socket(type);
connection = network_connect(socket, ip, port);

size = 10000;
type = buffer_grow;
alignment = 1;
buffer = buffer_create(size, type, alignment);

death = 0;


    surf = surface_create(1280, 760);
    surface_set_target(surf);
    draw_clear_alpha(c_black, 0);
    surface_reset_target();
    view_surface_id[0] = surf;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if death = 0 {
    screen_save("binches.png");
    screen_save_part("binches.png", PHOENIX.x-50, PHOENIX.y-50, 100, 100);
    /*surface_save(surf, "binches.png");
    surface_save_part(surf, "binches.png", PHOENIX.x-50, PHOENIX.y-50, 100, 100);*/
    var buffy = buffer_load(working_directory + "\binches.png");
    stringly = buffer_base64_encode(buffy, 0, buffer_get_size(buffy));
    
    //console_log(stringly);
    
    buffer_seek(buffer, buffer_seek_start, 0);
    //buffer_write(buffer, buffer_f32, PHOENIX.x);
    //buffer_write(buffer, buffer_f32, PHOENIX.y);
    buffer_write(buffer, buffer_string, stringly);
    
    network_send_packet(socket, buffer, buffer_tell(buffer));
}
death++;
if death &gt;= 30 {
    death = 0;
}


//buffer_seek(buffer, buffer_seek_start, 0);
/*buffer_write(buffer, buffer_string, stringly);
buffer_write(buffer, buffer_f32, PHOENIX.x);
buffer_write(buffer, buffer_f32, PHOENIX.y);

buffer_write(buffer, buffer_string, string(PHOENIX.x));
buffer_write(buffer, buffer_string, string(PHOENIX.y));

network_send_packet(socket, buffer, buffer_tell(buffer));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(socket);
buffer_delete(buffer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>screen_save_part("binches.png", PHOENIX.x-50, PHOENIX.y-50, 100, 100);
var buffy = buffer_load(working_directory + "\binches.png");
stringly = buffer_base64_encode(buffy, 0, buffer_get_size(buffy));

console_log(stringly);

buffer_seek(buffer, buffer_seek_start, 0);
//buffer_write(buffer, buffer_f32, PHOENIX.x);
//buffer_write(buffer, buffer_f32, PHOENIX.y);
buffer_write(buffer, buffer_string, stringly);

network_send_packet(socket, buffer, buffer_tell(buffer));


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>type = network_socket_tcp;
ip = "192.168.86.39";
port = 1337;
socket = network_create_socket(type);
connection = network_connect(socket, ip, port);

size = 10000;
type = buffer_fixed;
alignment = 1;
buffer = buffer_create(1024, type, alignment);

death = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
